{"remainingRequest":"/Users/anastasia/Documents/forma/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/anastasia/Documents/forma/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/anastasia/Documents/forma/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/anastasia/Documents/forma/src/components/HeaderForma.vue?vue&type=template&id=5b3a3f90&","dependencies":[{"path":"/Users/anastasia/Documents/forma/src/components/HeaderForma.vue","mtime":1622416974416},{"path":"/Users/anastasia/Documents/forma/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/anastasia/Documents/forma/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/anastasia/Documents/forma/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/anastasia/Documents/forma/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}