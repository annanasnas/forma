{"remainingRequest":"/Users/anastasia/forma/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/anastasia/forma/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/anastasia/forma/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/anastasia/forma/src/components/Form.vue?vue&type=template&id=1b5a9218&scoped=true&","dependencies":[{"path":"/Users/anastasia/forma/src/components/Form.vue","mtime":1619508753594},{"path":"/Users/anastasia/forma/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/anastasia/forma/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/anastasia/forma/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/anastasia/forma/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}